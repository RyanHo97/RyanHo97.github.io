import{_ as s,o as a,c as n,V as p}from"./chunks/framework.7ae304b1.js";const F=JSON.parse('{"title":"CSS 盒子模型","description":"","frontmatter":{},"headers":[],"relativePath":"blog/css/11css-盒子模型.md","filePath":"blog/css/11css-盒子模型.md","lastUpdated":1684751288000}'),l={name:"blog/css/11css-盒子模型.md"},o=p(`<h1 id="css-盒子模型" tabindex="-1">CSS 盒子模型 <a class="header-anchor" href="#css-盒子模型" aria-label="Permalink to &quot;CSS 盒子模型&quot;">​</a></h1><h2 id="css-盒子模型-box-model" tabindex="-1">CSS 盒子模型(Box Model) <a class="header-anchor" href="#css-盒子模型-box-model" aria-label="Permalink to &quot;CSS 盒子模型(Box Model)&quot;">​</a></h2><p>所有HTML元素可以看作盒子，在CSS中，&quot;box model&quot;这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p><p>不同部分的说明：</p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><p>为了正确设置元素在所有浏览器中的宽度和高度，你需要知道的盒模型是如何工作的。</p><h2 id="元素的宽度和高度" tabindex="-1">元素的宽度和高度 <a class="header-anchor" href="#元素的宽度和高度" aria-label="Permalink to &quot;元素的宽度和高度&quot;">​</a></h2><p>💡<strong>重要:</strong> 当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完整大小的元素，你还必须添加内边距，边框和外边距。</p><p>下面的例子中的元素的总宽度为 450px：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25px</span><span style="color:#A6ACCD;"> solid green</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>让我们自己算算： 300px (宽) + 50px (左 + 右填充) + 50px (左 + 右边框) + 50px (左 + 右边距) = 450px</p><p>试想一下，你只有 250 像素的空间。让我们设置总宽度为 250 像素的元素:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">220px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5px</span><span style="color:#A6ACCD;"> solid gray</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>最终元素的总宽度计算公式是这样的：</p><p>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p><p>元素的总高度最终计算公式是这样的：</p><p>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p><h2 id="浏览器的兼容性问题" tabindex="-1">浏览器的兼容性问题 <a class="header-anchor" href="#浏览器的兼容性问题" aria-label="Permalink to &quot;浏览器的兼容性问题&quot;">​</a></h2><p>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</p><p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p><p>IE8 及更早IE版本不支持设置填充的宽度和边框的宽度属性。</p><p>解决IE8及更早版本不兼容问题可以在HTML页面声明 <code>&lt;!DOCTYPE html&gt;</code>即可。</p>`,24),e=[o];function t(c,r,C,i,D,d){return a(),n("div",null,e)}const A=s(l,[["render",t]]);export{F as __pageData,A as default};
